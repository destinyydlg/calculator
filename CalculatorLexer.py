# Generated from Calculator.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,22,124,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
        7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,12,4,12,92,8,12,11,12,12,12,93,1,13,4,13,97,8,13,
        11,13,12,13,98,1,14,3,14,102,8,14,1,14,1,14,1,15,4,15,107,8,15,11,
        15,12,15,108,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,
        20,1,20,1,21,1,21,0,0,22,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,1,0,3,2,0,65,90,97,122,1,0,48,57,2,0,9,9,32,32,127,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,1,45,1,0,0,0,3,47,1,0,0,0,5,49,1,0,0,0,7,51,1,
        0,0,0,9,55,1,0,0,0,11,59,1,0,0,0,13,63,1,0,0,0,15,68,1,0,0,0,17,
        73,1,0,0,0,19,78,1,0,0,0,21,83,1,0,0,0,23,87,1,0,0,0,25,91,1,0,0,
        0,27,96,1,0,0,0,29,101,1,0,0,0,31,106,1,0,0,0,33,112,1,0,0,0,35,
        114,1,0,0,0,37,116,1,0,0,0,39,118,1,0,0,0,41,120,1,0,0,0,43,122,
        1,0,0,0,45,46,5,61,0,0,46,2,1,0,0,0,47,48,5,40,0,0,48,4,1,0,0,0,
        49,50,5,41,0,0,50,6,1,0,0,0,51,52,5,99,0,0,52,53,5,111,0,0,53,54,
        5,115,0,0,54,8,1,0,0,0,55,56,5,115,0,0,56,57,5,105,0,0,57,58,5,110,
        0,0,58,10,1,0,0,0,59,60,5,116,0,0,60,61,5,97,0,0,61,62,5,110,0,0,
        62,12,1,0,0,0,63,64,5,97,0,0,64,65,5,99,0,0,65,66,5,111,0,0,66,67,
        5,115,0,0,67,14,1,0,0,0,68,69,5,97,0,0,69,70,5,115,0,0,70,71,5,105,
        0,0,71,72,5,110,0,0,72,16,1,0,0,0,73,74,5,97,0,0,74,75,5,116,0,0,
        75,76,5,97,0,0,76,77,5,110,0,0,77,18,1,0,0,0,78,79,5,115,0,0,79,
        80,5,113,0,0,80,81,5,114,0,0,81,82,5,116,0,0,82,20,1,0,0,0,83,84,
        5,108,0,0,84,85,5,111,0,0,85,86,5,103,0,0,86,22,1,0,0,0,87,88,5,
        108,0,0,88,89,5,110,0,0,89,24,1,0,0,0,90,92,7,0,0,0,91,90,1,0,0,
        0,92,93,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,26,1,0,0,0,95,97,
        7,1,0,0,96,95,1,0,0,0,97,98,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,
        99,28,1,0,0,0,100,102,5,13,0,0,101,100,1,0,0,0,101,102,1,0,0,0,102,
        103,1,0,0,0,103,104,5,10,0,0,104,30,1,0,0,0,105,107,7,2,0,0,106,
        105,1,0,0,0,107,108,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,
        110,1,0,0,0,110,111,6,15,0,0,111,32,1,0,0,0,112,113,5,43,0,0,113,
        34,1,0,0,0,114,115,5,45,0,0,115,36,1,0,0,0,116,117,5,42,0,0,117,
        38,1,0,0,0,118,119,5,47,0,0,119,40,1,0,0,0,120,121,5,62,0,0,121,
        42,1,0,0,0,122,123,5,60,0,0,123,44,1,0,0,0,5,0,93,98,101,108,1,6,
        0,0
    ]

class CalculatorLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    ID = 13
    INT = 14
    NEWLINE = 15
    WS = 16
    ADD = 17
    SUB = 18
    MUL = 19
    DIV = 20
    GT = 21
    LT = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'('", "')'", "'cos'", "'sin'", "'tan'", "'acos'", "'asin'", 
            "'atan'", "'sqrt'", "'log'", "'ln'", "'+'", "'-'", "'*'", "'/'", 
            "'>'", "'<'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "NEWLINE", "WS", "ADD", "SUB", "MUL", "DIV", "GT", 
            "LT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "ID", "INT", 
                  "NEWLINE", "WS", "ADD", "SUB", "MUL", "DIV", "GT", "LT" ]

    grammarFileName = "Calculator.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


